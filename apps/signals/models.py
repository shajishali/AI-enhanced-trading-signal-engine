from django.db import models
from django.contrib.auth.models import User
from apps.trading.models import Symbol


class SignalType(models.Model):
    """Types of trading signals"""
    name = models.CharField(max_length=50, unique=True)
    description = models.TextField()
    is_active = models.BooleanField(default=True)
    
    def __str__(self):
        return self.name


class AIModel(models.Model):
    """AI models used for signal generation"""
    MODEL_TYPES = [
        ('LSTM', 'LSTM'),
        ('GRU', 'GRU'),
        ('TRANSFORMER', 'Transformer'),
        ('ENSEMBLE', 'Ensemble'),
        ('CUSTOM', 'Custom'),
    ]
    
    name = models.CharField(max_length=100)
    model_type = models.CharField(max_length=20, choices=MODEL_TYPES)
    version = models.CharField(max_length=20)
    description = models.TextField()
    accuracy = models.DecimalField(max_digits=5, decimal_places=2, null=True, blank=True)
    is_active = models.BooleanField(default=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    def __str__(self):
        return f"{self.name} v{self.version}"


class Signal(models.Model):
    """Trading signals generated by AI models"""
    SIGNAL_TYPES = [
        ('BUY', 'Buy'),
        ('SELL', 'Sell'),
        ('HOLD', 'Hold'),
    ]
    
    CONFIDENCE_LEVELS = [
        ('LOW', 'Low'),
        ('MEDIUM', 'Medium'),
        ('HIGH', 'High'),
    ]
    
    symbol = models.ForeignKey(Symbol, on_delete=models.CASCADE)
    signal_type = models.ForeignKey(SignalType, on_delete=models.CASCADE)
    ai_model = models.ForeignKey(AIModel, on_delete=models.CASCADE)
    signal_direction = models.CharField(max_length=4, choices=SIGNAL_TYPES)
    confidence_level = models.CharField(max_length=6, choices=CONFIDENCE_LEVELS)
    confidence_score = models.DecimalField(max_digits=5, decimal_places=4)
    price_target = models.DecimalField(max_digits=15, decimal_places=6, null=True, blank=True)
    stop_loss = models.DecimalField(max_digits=15, decimal_places=6, null=True, blank=True)
    take_profit = models.DecimalField(max_digits=15, decimal_places=6, null=True, blank=True)
    reasoning = models.TextField()
    generated_at = models.DateTimeField(auto_now_add=True)
    expires_at = models.DateTimeField(null=True, blank=True)
    is_active = models.BooleanField(default=True)
    
    def __str__(self):
        return f"{self.symbol.symbol} {self.signal_direction} - {self.confidence_level}"


class SignalExecution(models.Model):
    """Track signal executions"""
    signal = models.ForeignKey(Signal, on_delete=models.CASCADE)
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    executed_at = models.DateTimeField(auto_now_add=True)
    execution_price = models.DecimalField(max_digits=15, decimal_places=6)
    quantity = models.DecimalField(max_digits=15, decimal_places=6)
    notes = models.TextField(blank=True)
    
    def __str__(self):
        return f"{self.signal.symbol.symbol} executed at {self.executed_at}"


class ModelPerformance(models.Model):
    """Track AI model performance"""
    ai_model = models.ForeignKey(AIModel, on_delete=models.CASCADE)
    symbol = models.ForeignKey(Symbol, on_delete=models.CASCADE)
    total_signals = models.IntegerField(default=0)
    correct_signals = models.IntegerField(default=0)
    accuracy = models.DecimalField(max_digits=5, decimal_places=2, default=0.00)
    total_pnl = models.DecimalField(max_digits=15, decimal_places=2, default=0.00)
    win_rate = models.DecimalField(max_digits=5, decimal_places=2, default=0.00)
    last_updated = models.DateTimeField(auto_now=True)
    
    def __str__(self):
        return f"{self.ai_model.name} - {self.symbol.symbol} - {self.accuracy}%"
    
    def update_performance(self):
        if self.total_signals > 0:
            self.accuracy = (self.correct_signals / self.total_signals) * 100
            self.save()
