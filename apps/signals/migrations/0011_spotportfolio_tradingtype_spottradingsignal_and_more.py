# Generated by Django 5.2.5 on 2025-10-01 09:34

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('signals', '0010_chartimage_chartmlmodel_abtest_chartmlprediction_and_more'),
        ('trading', '0002_symbol_sector'),
    ]

    operations = [
        migrations.CreateModel(
            name='SpotPortfolio',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('portfolio_type', models.CharField(choices=[('ACCUMULATION', 'Accumulation Portfolio'), ('DCA', 'Dollar Cost Average Portfolio'), ('BALANCED', 'Balanced Portfolio'), ('GROWTH', 'Growth Portfolio'), ('CONSERVATIVE', 'Conservative Portfolio')], max_length=20)),
                ('description', models.TextField(blank=True)),
                ('total_value_usd', models.DecimalField(decimal_places=2, default=0, max_digits=15)),
                ('target_allocation', models.JSONField(default=dict, help_text='Target allocation per symbol')),
                ('rebalance_frequency', models.CharField(choices=[('MONTHLY', 'Monthly'), ('QUARTERLY', 'Quarterly'), ('SEMI_ANNUALLY', 'Semi-Annually'), ('ANNUALLY', 'Annually')], default='QUARTERLY', max_length=20)),
                ('total_return_percentage', models.FloatField(default=0)),
                ('annualized_return', models.FloatField(default=0)),
                ('max_drawdown', models.FloatField(default=0)),
                ('sharpe_ratio', models.FloatField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Spot Portfolio',
                'verbose_name_plural': 'Spot Portfolios',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TradingType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('FUTURES', 'Futures Trading'), ('SPOT', 'Spot Trading'), ('MARGIN', 'Margin Trading'), ('STAKING', 'Staking')], max_length=20, unique=True)),
                ('description', models.TextField()),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Trading Type',
                'verbose_name_plural': 'Trading Types',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='SpotTradingSignal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('signal_category', models.CharField(choices=[('ACCUMULATION', 'Accumulation Phase'), ('DISTRIBUTION', 'Distribution Phase'), ('HOLD', 'Hold Position'), ('DCA', 'Dollar Cost Average'), ('REBALANCE', 'Portfolio Rebalance')], max_length=20)),
                ('investment_horizon', models.CharField(choices=[('SHORT_TERM', '6-12 months'), ('MEDIUM_TERM', '1-2 years'), ('LONG_TERM', '2-5 years'), ('VERY_LONG_TERM', '5+ years')], max_length=20)),
                ('fundamental_score', models.FloatField(help_text='Fundamental analysis score (0-1)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('technical_score', models.FloatField(help_text='Technical analysis score (0-1)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('sentiment_score', models.FloatField(help_text='Market sentiment score (0-1)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('recommended_allocation', models.FloatField(help_text='Recommended portfolio allocation (0-1)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('dca_frequency', models.CharField(choices=[('DAILY', 'Daily'), ('WEEKLY', 'Weekly'), ('MONTHLY', 'Monthly'), ('QUARTERLY', 'Quarterly')], default='MONTHLY', max_length=20)),
                ('dca_amount_usd', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('target_price_6m', models.DecimalField(blank=True, decimal_places=6, max_digits=15, null=True)),
                ('target_price_1y', models.DecimalField(blank=True, decimal_places=6, max_digits=15, null=True)),
                ('target_price_2y', models.DecimalField(blank=True, decimal_places=6, max_digits=15, null=True)),
                ('max_position_size', models.FloatField(help_text='Maximum position size as % of portfolio', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('stop_loss_percentage', models.FloatField(help_text='Stop loss as % of entry price', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('analysis_metadata', models.JSONField(blank=True, default=dict)),
                ('fundamental_factors', models.JSONField(blank=True, default=list)),
                ('technical_factors', models.JSONField(blank=True, default=list)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('symbol', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='trading.symbol')),
            ],
            options={
                'verbose_name': 'Spot Trading Signal',
                'verbose_name_plural': 'Spot Trading Signals',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SpotSignalHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('symbol_name', models.CharField(max_length=20)),
                ('signal_category', models.CharField(max_length=20)),
                ('investment_horizon', models.CharField(max_length=20)),
                ('fundamental_score', models.FloatField()),
                ('technical_score', models.FloatField()),
                ('sentiment_score', models.FloatField()),
                ('recommended_allocation', models.FloatField()),
                ('dca_frequency', models.CharField(max_length=20)),
                ('target_price_6m', models.DecimalField(blank=True, decimal_places=6, max_digits=15, null=True)),
                ('target_price_1y', models.DecimalField(blank=True, decimal_places=6, max_digits=15, null=True)),
                ('target_price_2y', models.DecimalField(blank=True, decimal_places=6, max_digits=15, null=True)),
                ('entry_price', models.DecimalField(blank=True, decimal_places=6, max_digits=15, null=True)),
                ('exit_price', models.DecimalField(blank=True, decimal_places=6, max_digits=15, null=True)),
                ('performance_percentage', models.FloatField(blank=True, null=True)),
                ('is_profitable', models.BooleanField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('archived_at', models.DateTimeField(auto_now_add=True)),
                ('original_signal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='signals.spottradingsignal')),
            ],
            options={
                'verbose_name': 'Spot Signal History',
                'verbose_name_plural': 'Spot Signal Histories',
                'ordering': ['-archived_at'],
            },
        ),
        migrations.CreateModel(
            name='SpotPosition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.DecimalField(decimal_places=8, max_digits=20)),
                ('average_price', models.DecimalField(decimal_places=6, max_digits=15)),
                ('current_price', models.DecimalField(blank=True, decimal_places=6, max_digits=15, null=True)),
                ('total_cost', models.DecimalField(decimal_places=2, max_digits=15)),
                ('current_value', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('unrealized_pnl', models.DecimalField(blank=True, decimal_places=2, max_digits=15, null=True)),
                ('unrealized_pnl_percentage', models.FloatField(blank=True, null=True)),
                ('portfolio_allocation', models.FloatField(help_text='Position allocation as % of portfolio', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('portfolio', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='positions', to='signals.spotportfolio')),
                ('symbol', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='trading.symbol')),
            ],
            options={
                'verbose_name': 'Spot Position',
                'verbose_name_plural': 'Spot Positions',
                'ordering': ['-portfolio_allocation'],
                'unique_together': {('portfolio', 'symbol')},
            },
        ),
        migrations.AddIndex(
            model_name='spottradingsignal',
            index=models.Index(fields=['symbol', 'is_active'], name='signals_spo_symbol__4bc1cf_idx'),
        ),
        migrations.AddIndex(
            model_name='spottradingsignal',
            index=models.Index(fields=['signal_category', 'investment_horizon'], name='signals_spo_signal__8af7f6_idx'),
        ),
        migrations.AddIndex(
            model_name='spottradingsignal',
            index=models.Index(fields=['created_at'], name='signals_spo_created_873b3f_idx'),
        ),
    ]
