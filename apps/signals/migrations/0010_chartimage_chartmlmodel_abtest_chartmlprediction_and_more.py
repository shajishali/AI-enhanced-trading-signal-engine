# Generated by Django 5.2.5 on 2025-09-30 05:17

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('signals', '0009_subscriptiontier_tradingsignal_is_hybrid_and_more'),
        ('trading', '0002_symbol_sector'),
    ]

    operations = [
        migrations.CreateModel(
            name='ChartImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chart_type', models.CharField(choices=[('CANDLESTICK', 'Candlestick Chart'), ('LINE', 'Line Chart'), ('HEIKIN_ASHI', 'Heikin Ashi Chart'), ('RENKO', 'Renko Chart'), ('POINT_FIGURE', 'Point & Figure Chart')], default='CANDLESTICK', max_length=20)),
                ('timeframe', models.CharField(choices=[('1M', '1 Minute'), ('5M', '5 Minutes'), ('15M', '15 Minutes'), ('30M', '30 Minutes'), ('1H', '1 Hour'), ('4H', '4 Hours'), ('1D', '1 Day'), ('1W', '1 Week')], max_length=10)),
                ('image_file', models.ImageField(help_text='Chart image file', upload_to='charts/%Y/%m/%d/')),
                ('image_width', models.IntegerField(default=800)),
                ('image_height', models.IntegerField(default=600)),
                ('start_time', models.DateTimeField(help_text='Start time of chart data')),
                ('end_time', models.DateTimeField(help_text='End time of chart data')),
                ('candles_count', models.IntegerField(help_text='Number of candles in chart')),
                ('price_range_low', models.DecimalField(decimal_places=8, max_digits=20)),
                ('price_range_high', models.DecimalField(decimal_places=8, max_digits=20)),
                ('current_price', models.DecimalField(decimal_places=8, max_digits=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_training_data', models.BooleanField(default=False)),
                ('is_validated', models.BooleanField(default=False)),
                ('symbol', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chart_images', to='trading.symbol')),
            ],
            options={
                'verbose_name': 'Chart Image',
                'verbose_name_plural': 'Chart Images',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ChartMLModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('model_type', models.CharField(choices=[('CNN', 'Convolutional Neural Network'), ('RESNET', 'ResNet'), ('VISION_TRANSFORMER', 'Vision Transformer'), ('YOLO', 'YOLO Object Detection'), ('ENSEMBLE', 'Ensemble Model')], max_length=30)),
                ('version', models.CharField(default='1.0', max_length=20)),
                ('status', models.CharField(choices=[('TRAINING', 'Training'), ('TRAINED', 'Trained'), ('DEPLOYED', 'Deployed'), ('ARCHIVED', 'Archived'), ('FAILED', 'Failed')], default='TRAINING', max_length=20)),
                ('target_task', models.CharField(help_text="Target task (e.g., 'pattern_recognition', 'entry_detection')", max_length=50)),
                ('prediction_horizon', models.IntegerField(help_text='Prediction horizon in hours')),
                ('timeframes_used', models.JSONField(default=list, help_text='List of timeframes used in training')),
                ('training_start_date', models.DateTimeField()),
                ('training_end_date', models.DateTimeField()),
                ('validation_start_date', models.DateTimeField()),
                ('validation_end_date', models.DateTimeField()),
                ('accuracy', models.FloatField(blank=True, null=True)),
                ('precision', models.FloatField(blank=True, null=True)),
                ('recall', models.FloatField(blank=True, null=True)),
                ('f1_score', models.FloatField(blank=True, null=True)),
                ('auc_score', models.FloatField(blank=True, null=True)),
                ('model_file_path', models.CharField(blank=True, max_length=500, null=True)),
                ('scaler_file_path', models.CharField(blank=True, max_length=500, null=True)),
                ('config_file_path', models.CharField(blank=True, max_length=500, null=True)),
                ('training_samples', models.IntegerField(blank=True, null=True)),
                ('validation_samples', models.IntegerField(blank=True, null=True)),
                ('symbols_used', models.JSONField(default=list, help_text='List of symbols used in training')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Chart ML Model',
                'verbose_name_plural': 'Chart ML Models',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['model_type', 'status'], name='signals_cha_model_t_4d0949_idx'), models.Index(fields=['is_active', 'created_at'], name='signals_cha_is_acti_01bf6f_idx')],
            },
        ),
        migrations.CreateModel(
            name='ABTest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('test_name', models.CharField(max_length=200)),
                ('traffic_split', models.FloatField(default=0.5)),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField()),
                ('status', models.CharField(choices=[('RUNNING', 'Running'), ('COMPLETED', 'Completed'), ('CANCELLED', 'Cancelled')], default='RUNNING', max_length=20)),
                ('min_sample_size', models.IntegerField(default=100)),
                ('confidence_level', models.FloatField(default=0.95)),
                ('winner_threshold', models.FloatField(default=0.05)),
                ('test_results', models.JSONField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('model_a', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ab_tests_as_a', to='signals.chartmlmodel')),
                ('model_b', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ab_tests_as_b', to='signals.chartmlmodel')),
                ('winner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ab_tests_won', to='signals.chartmlmodel')),
            ],
            options={
                'db_table': 'signals_ab_test',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ChartMLPrediction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prediction_type', models.CharField(choices=[('PATTERN_RECOGNITION', 'Pattern Recognition'), ('ENTRY_DETECTION', 'Entry Point Detection'), ('SIGNAL_DIRECTION', 'Signal Direction'), ('CONFIDENCE_SCORE', 'Confidence Score')], max_length=30)),
                ('prediction_value', models.FloatField(help_text='Prediction value')),
                ('confidence_score', models.FloatField(help_text='Prediction confidence (0-1)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('prediction_details', models.JSONField(default=dict, help_text='Detailed prediction data')),
                ('prediction_probabilities', models.JSONField(default=dict, help_text='Class probabilities')),
                ('timeframe', models.CharField(max_length=10)),
                ('market_context', models.JSONField(default=dict, help_text='Market context at prediction time')),
                ('actual_value', models.FloatField(blank=True, null=True)),
                ('is_correct', models.BooleanField(blank=True, null=True)),
                ('validation_score', models.FloatField(blank=True, null=True)),
                ('prediction_timestamp', models.DateTimeField(auto_now_add=True)),
                ('processing_time_ms', models.IntegerField(blank=True, null=True)),
                ('chart_image', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ml_predictions', to='signals.chartimage')),
                ('model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='predictions', to='signals.chartmlmodel')),
                ('symbol', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chart_ml_predictions', to='trading.symbol')),
            ],
            options={
                'verbose_name': 'Chart ML Prediction',
                'verbose_name_plural': 'Chart ML Predictions',
                'ordering': ['-prediction_timestamp'],
            },
        ),
        migrations.CreateModel(
            name='ChartPattern',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pattern_type', models.CharField(choices=[('SUPPORT_LEVEL', 'Support Level'), ('RESISTANCE_LEVEL', 'Resistance Level'), ('SUPPORT_BREAK', 'Support Break'), ('RESISTANCE_BREAK', 'Resistance Break'), ('UPTREND', 'Uptrend'), ('DOWNTREND', 'Downtrend'), ('SIDEWAYS', 'Sideways'), ('TREND_REVERSAL', 'Trend Reversal'), ('BOS', 'Break of Structure'), ('CHOCH', 'Change of Character'), ('ORDER_BLOCK', 'Order Block'), ('FAIR_VALUE_GAP', 'Fair Value Gap'), ('LIQUIDITY_SWEEP', 'Liquidity Sweep'), ('HEAD_SHOULDERS', 'Head and Shoulders'), ('DOUBLE_TOP', 'Double Top'), ('DOUBLE_BOTTOM', 'Double Bottom'), ('TRIANGLE', 'Triangle'), ('FLAG', 'Flag'), ('PENNANT', 'Pennant'), ('WEDGE', 'Wedge'), ('BULLISH_ENGULFING', 'Bullish Engulfing'), ('BEARISH_ENGULFING', 'Bearish Engulfing'), ('HAMMER', 'Hammer'), ('DOJI', 'Doji'), ('SHOOTING_STAR', 'Shooting Star')], max_length=30)),
                ('confidence_score', models.FloatField(help_text='Pattern confidence score (0-1)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('x_start', models.FloatField(help_text='Pattern start X coordinate (0-1)')),
                ('y_start', models.FloatField(help_text='Pattern start Y coordinate (0-1)')),
                ('x_end', models.FloatField(help_text='Pattern end X coordinate (0-1)')),
                ('y_end', models.FloatField(help_text='Pattern end Y coordinate (0-1)')),
                ('strength', models.CharField(choices=[('WEAK', 'Weak'), ('MODERATE', 'Moderate'), ('STRONG', 'Strong'), ('VERY_STRONG', 'Very Strong')], default='MODERATE', max_length=20)),
                ('pattern_price_low', models.DecimalField(decimal_places=8, max_digits=20)),
                ('pattern_price_high', models.DecimalField(decimal_places=8, max_digits=20)),
                ('detected_at', models.DateTimeField(auto_now_add=True)),
                ('is_validated', models.BooleanField(default=False)),
                ('validation_score', models.FloatField(blank=True, null=True)),
                ('chart_image', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='patterns', to='signals.chartimage')),
            ],
            options={
                'verbose_name': 'Chart Pattern',
                'verbose_name_plural': 'Chart Patterns',
                'ordering': ['-confidence_score'],
            },
        ),
        migrations.CreateModel(
            name='EntryPoint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entry_type', models.CharField(choices=[('BUY', 'Buy Entry'), ('SELL', 'Sell Entry'), ('BUY_LIMIT', 'Buy Limit Entry'), ('SELL_LIMIT', 'Sell Limit Entry'), ('BUY_STOP', 'Buy Stop Entry'), ('SELL_STOP', 'Sell Stop Entry')], max_length=20)),
                ('entry_price', models.DecimalField(decimal_places=8, max_digits=20)),
                ('confidence_level', models.CharField(choices=[('LOW', 'Low Confidence'), ('MEDIUM', 'Medium Confidence'), ('HIGH', 'High Confidence'), ('VERY_HIGH', 'Very High Confidence')], max_length=20)),
                ('confidence_score', models.FloatField(help_text='Entry confidence score (0-1)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('stop_loss', models.DecimalField(blank=True, decimal_places=8, max_digits=20, null=True)),
                ('take_profit', models.DecimalField(blank=True, decimal_places=8, max_digits=20, null=True)),
                ('risk_reward_ratio', models.FloatField(blank=True, null=True)),
                ('entry_x', models.FloatField(help_text='Entry X coordinate on chart (0-1)')),
                ('entry_y', models.FloatField(help_text='Entry Y coordinate on chart (0-1)')),
                ('market_structure', models.CharField(blank=True, max_length=50)),
                ('timeframe_context', models.CharField(blank=True, max_length=50)),
                ('detected_at', models.DateTimeField(auto_now_add=True)),
                ('is_validated', models.BooleanField(default=False)),
                ('validation_score', models.FloatField(blank=True, null=True)),
                ('chart_image', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='entry_points', to='signals.chartimage')),
                ('pattern', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='entry_points', to='signals.chartpattern')),
            ],
            options={
                'verbose_name': 'Entry Point',
                'verbose_name_plural': 'Entry Points',
                'ordering': ['-confidence_score'],
            },
        ),
        migrations.CreateModel(
            name='ModelPerformanceMetrics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('monitoring_start_time', models.DateTimeField()),
                ('monitoring_end_time', models.DateTimeField()),
                ('total_predictions', models.IntegerField(default=0)),
                ('average_accuracy', models.FloatField(default=0.0)),
                ('average_inference_time', models.FloatField(default=0.0)),
                ('average_memory_usage', models.FloatField(default=0.0)),
                ('error_count', models.IntegerField(default=0)),
                ('alerts_count', models.IntegerField(default=0)),
                ('performance_data', models.JSONField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='performance_metrics', to='signals.chartmlmodel')),
            ],
            options={
                'db_table': 'signals_model_performance_metrics',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='RetrainingTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scheduled_time', models.DateTimeField()),
                ('started_time', models.DateTimeField(blank=True, null=True)),
                ('completed_time', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('SCHEDULED', 'Scheduled'), ('RUNNING', 'Running'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed'), ('CANCELLED', 'Cancelled')], default='SCHEDULED', max_length=20)),
                ('retraining_reason', models.CharField(choices=[('PERFORMANCE_DROP', 'Performance Drop'), ('SCHEDULED', 'Scheduled'), ('MANUAL', 'Manual'), ('NEW_DATA', 'New Data Available')], max_length=50)),
                ('retraining_config', models.JSONField()),
                ('new_model_path', models.CharField(blank=True, max_length=500, null=True)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='retraining_tasks', to='signals.chartmlmodel')),
            ],
            options={
                'db_table': 'signals_retraining_task',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='chartimage',
            index=models.Index(fields=['symbol', 'timeframe', 'created_at'], name='signals_cha_symbol__742f71_idx'),
        ),
        migrations.AddIndex(
            model_name='chartimage',
            index=models.Index(fields=['is_training_data', 'is_validated'], name='signals_cha_is_trai_24b9a7_idx'),
        ),
        migrations.AddIndex(
            model_name='chartmlprediction',
            index=models.Index(fields=['model', 'prediction_type'], name='signals_cha_model_i_906b02_idx'),
        ),
        migrations.AddIndex(
            model_name='chartmlprediction',
            index=models.Index(fields=['symbol', 'prediction_timestamp'], name='signals_cha_symbol__722e6e_idx'),
        ),
        migrations.AddIndex(
            model_name='chartmlprediction',
            index=models.Index(fields=['is_correct', 'prediction_timestamp'], name='signals_cha_is_corr_4c4b9d_idx'),
        ),
        migrations.AddIndex(
            model_name='chartpattern',
            index=models.Index(fields=['pattern_type', 'confidence_score'], name='signals_cha_pattern_fa4adf_idx'),
        ),
        migrations.AddIndex(
            model_name='chartpattern',
            index=models.Index(fields=['is_validated', 'detected_at'], name='signals_cha_is_vali_2b856d_idx'),
        ),
        migrations.AddIndex(
            model_name='entrypoint',
            index=models.Index(fields=['entry_type', 'confidence_score'], name='signals_ent_entry_t_68e8fe_idx'),
        ),
        migrations.AddIndex(
            model_name='entrypoint',
            index=models.Index(fields=['is_validated', 'detected_at'], name='signals_ent_is_vali_445a51_idx'),
        ),
    ]
