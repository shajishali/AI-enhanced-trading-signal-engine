#!/usr/bin/env python
"""
Test script to verify global live cryptocurrency prices are working
"""

import os
import sys
import django

# Setup Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ai_trading_engine.settings')
django.setup()

from django.core.cache import cache
from apps.core.context_processors import live_crypto_prices, market_status

def test_global_context_processors():
    """Test the global context processors"""
    print("üöÄ TESTING GLOBAL LIVE CRYPTOCURRENCY PRICES")
    print("=" * 60)
    
    try:
        # Test live crypto prices context processor
        print("üìä Testing live_crypto_prices context processor...")
        
        # Create a mock request
        class MockRequest:
            pass
        
        request = MockRequest()
        
        # Get live crypto prices
        crypto_context = live_crypto_prices(request)
        
        if 'global_crypto_prices' in crypto_context:
            global_prices = crypto_context['global_crypto_prices']
            has_prices = crypto_context.get('has_live_prices', False)
            
            print(f"‚úÖ Global crypto prices found: {len(global_prices)} symbols")
            print(f"‚úÖ Has live prices: {has_prices}")
            
            if global_prices:
                print("\n=== ü™ô GLOBAL CRYPTOCURRENCY PRICES ===")
                for symbol, data in global_prices.items():
                    price = data.get('price', 0)
                    change_24h = data.get('change_24h', 0)
                    volume_24h = data.get('volume_24h', 0)
                    source = data.get('source', 'Unknown')
                    
                    print(f"{symbol:6} | ${price:>12.2f} | {change_24h:>+8.2f}% | Volume: {volume_24h:>12,.0f} | Source: {source}")
            else:
                print("‚ö†Ô∏è No global crypto prices available")
        else:
            print("‚ùå Global crypto prices not found in context")
        
        # Test market status context processor
        print("\nüìà Testing market_status context processor...")
        
        market_context = market_status(request)
        
        if 'market_status' in market_context:
            market_data = market_context['market_status']
            
            print(f"‚úÖ Market status found:")
            print(f"   Sentiment: {market_data.get('sentiment', 'Unknown')}")
            print(f"   Average Change: {market_data.get('average_change', 0)}%")
            print(f"   Positive Symbols: {market_data.get('positive_symbols', 0)}/{market_data.get('total_symbols', 0)}")
            print(f"   Last Updated: {market_data.get('last_updated', 'Unknown')}")
        else:
            print("‚ùå Market status not found in context")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error testing global context processors: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_cache_functionality():
    """Test cache functionality for live prices"""
    print("\nüóÑÔ∏è Testing cache functionality...")
    
    try:
        # Check if live prices are cached
        cached_prices = cache.get('live_crypto_prices')
        
        if cached_prices:
            print(f"‚úÖ Live prices found in cache: {len(cached_prices)} symbols")
            
            # Show some cached prices
            top_symbols = ['BTC', 'ETH', 'SOL']
            for symbol in top_symbols:
                if symbol in cached_prices:
                    price = cached_prices[symbol].get('price', 0)
                    print(f"   {symbol}: ${price:,.2f}")
        else:
            print("‚ö†Ô∏è No live prices found in cache")
        
        # Check market status cache
        cached_market_status = cache.get('market_status')
        if cached_market_status:
            print(f"‚úÖ Market status found in cache")
        else:
            print("‚ö†Ô∏è No market status found in cache")
            
        return True
        
    except Exception as e:
        print(f"‚ùå Error testing cache: {e}")
        return False

def main():
    """Main test function"""
    success1 = test_global_context_processors()
    success2 = test_cache_functionality()
    
    print("\n" + "=" * 60)
    if success1 and success2:
        print("üéâ GLOBAL LIVE CRYPTOCURRENCY PRICES ARE WORKING!")
        print("‚úÖ Every page will now show live cryptocurrency prices!")
        print("‚úÖ Prices are automatically cached and updated!")
        print("‚úÖ Market status is calculated and displayed!")
    else:
        print("‚ö†Ô∏è Some issues found with global context processors")
    
    print("\nüìã WHAT THIS MEANS:")
    print("1. Live crypto prices now appear on EVERY page")
    print("2. Users see real-time BTC, ETH, SOL, BNB, XRP, ADA prices")
    print("3. Market sentiment and status are displayed globally")
    print("4. Prices auto-update every 30 seconds on all pages")
    print("5. No need to add prices manually to each template!")

if __name__ == "__main__":
    main()





